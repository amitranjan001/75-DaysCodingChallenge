    <-------------- 977. Squares of a Sorted Array ------------>
   
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

    public int[] sortedSquares(int[] nums) {
        int arr[] = new int[nums.length];
        int i =0;
        int j = arr.length-1;
        for(int k=arr.length-1;k>=0;k--)
        {
            int val1 = nums[i] * nums[i];
            int val2 = nums[j] * nums[j];
            if(val1 > val2)
            {
                arr[k]=val1;
                i++;
            }
            else
            {
                arr[k]= val2;
                j--;
            }
        }
        return arr;
    }
    
    
           <--------------- 724. Find Pivot Index -------------->
           
Given an array of integers nums, calculate the pivot index of this array.
The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.
   
Example 1:
Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Example 2:
Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.

Example 3:
Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0


     public int pivotIndex(int[] nums) {
        int rightSum = 0;
        int leftSum = 0;
        for(int i = nums.length - 1; i >= 0; i--) 
        {
            rightSum += nums[i];
        }
        for(int i = 0; i < nums.length; i++){
            rightSum -= nums[i];
            if(leftSum == rightSum) return i;
            {
                leftSum += nums[i];
            }
        }
        return -1;
    }
    
    
       <---------------- 169. Majority Element -------------->
       
Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

    public int majorityElement(int[] nums) {
        int val =nums[0];
        int count =1;
        int i=1;
        while(i < nums.length)
        {
            if(val == nums[i])
            {
                count++;
            }
            else
            {
                if(count >0)
                {
                    count--;
                }
                else
                {
                    val = nums[i];
                    count=1;
                }
            }
            i++;
        }
        return val;
    }
    
    
    
         <---------------- 122. Best Time to Buy and Sell Stock II -------------->
         
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

      public int maxProfit(int[] prices) {
         int res = 0;
        for (int i = 1; i < prices.length; ++i)
            res += Math.max(prices[i] - prices[i - 1], 0);
        return res;
        }
        
        


    <-------------  763. Partition Labels  -------------->
    
You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.
Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
Return a list of integers representing the size of these parts.

Example 1:
Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

Example 2:
Input: s = "eccbbbbdec"
Output: [10]


      HashMap<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            map.put(ch, i);
        }
        List<Integer> res = new ArrayList<>();
        int prev = 0;
        int max = 0;
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            max = Math.max(max, map.get(ch));
            if(max == i) {
                res.add(i - prev + 1);
                prev = i + 1;
            }
        }
        return res;
    }
    
    
        <------------------- 75. Sort Colors ----------------->
        
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, 
white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

      public void sortColors(int[] nums) {
        int length = nums.length;
        if(length==0)
            return;
        int l =0,m=0,h= length-1,temp;
            while(m <= h)
            {
                if(nums[m] == 1)
                    m++;
                else if(nums[m] == 0)
                {
                    temp = nums[l];
                    nums[l] = nums[m];
                    nums[m] = temp;
                    m++;
                    l++;
                }
                else if(nums[m] == 2)
                {
                    temp = nums[h];
                    nums[h] = nums[m];
                    nums[m] = temp;
                    h--;
                }
            }
    }


    <------------------ 48. Rotate Image ---------------------<
    
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

      public void rotate(int[][] matrix) {
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=i;j<matrix[0].length;j++)
            {
                int temp=0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix.length/2;j++)
            {
                int temp=0;
                temp =  matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length-1-j];
                matrix[i][matrix.length-1-j] =temp;
            }
        }
    }
    
    
        <------------------ 54. Spiral Matrix --------------->
        
Given an m x n matrix, return all elements of the matrix in spiral order

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

       public List<Integer> spiralOrder(int[][] matrix) {
        int tne = matrix.length * matrix[0].length;  // total no of element
        int rowmin =0, colmin =0, colmax=matrix[0].length-1,rowmax=matrix.length-1;
        List<Integer> ans =new ArrayList<>();
        int count=0;
    
        while(count  < tne)
        {
            //top wall
            for(int i=colmin;i<=colmax && count<tne;i++)
            {
                ans.add(matrix[rowmin][i]);
                count++;
            }
            rowmin++;
            //right wall
             for(int i=rowmin;i<=rowmax && count<tne;i++)
            {
                ans.add(matrix[i][colmax]);
                count++;
            }
            colmax--;
            //bottom wall
             for(int i=colmax;i>=colmin && count<tne;i--)
            {
                ans.add(matrix[rowmax][i]);
                count++;
            }
            rowmax--;
            //left wall
             for(int i=rowmax;i>=rowmin && count<tne;i--)
            {
                ans.add(matrix[i][colmin]);
                count++;
            }
            colmin++;
        }
        return ans;
    }

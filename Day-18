
      <-------------------- 410. Split Array Largest Sum ------------------>
      
Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.
Write an algorithm to minimize the largest sum among these m subarrays.

Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4

    public int splitArray(int[] nums, int m) {
         int max = Integer.MIN_VALUE;
        for(int i : nums){
            max = Math.max(max, i);
        }
        int left = max;
        int right = 1000000000;
        
        while(left < right){
            int mid = left + (right-left)/2;
            if(isPossible(nums, m, mid)){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        return left;
    }
    
    public boolean isPossible(int[] nums, int m, int mid){
        int count = 1;
        int sum_cur = 0;
        for(int i : nums){
            sum_cur += i;
            if(sum_cur > mid){
                count ++;
                sum_cur = i;
            }
            if(count > m){return false;}
        }
        return true;
    
    }


      <---------- 1.Two Sum ------------->
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

 public int[] twoSum(int[] nums, int target) {
        int res[] = new int[2];
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            int b = target - nums[i];
            if(map.containsKey(b))
            {
                res[0]  = i;
                res[1] = map.get(b);
                break;
            }
            else
            {
                map.put(nums[i],i);
            }
        }
        return res;
    }
    
    <------ 121. Best Time to Buy and Sell Stock -------->
    
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 
  public int maxProfit(int[] prices) {
        int maxProfit=0;
        int buy= prices[0]; //min
        for(int i=1;i<prices.length;i++)
        {
            if(buy < prices[i])
            {
                maxProfit =Math.max(maxProfit,prices[i] - buy);
            }
            else
            {
                buy= prices[i];
            }
        }
        return maxProfit;   
    }
    
    
          <--------------- 66. Plus One ------------>
          
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].

Example 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
  
  public int[] plusOne(int[] digits) {
        int length= digits.length; 
        for(int i=length-1;i>=0;i--)
        {
            if(digits[i] < 9 )
            {
                digits[i]++;
                return digits;
            }
            digits[i]=0;
        }
        int arr[] = new int[length +1];
        arr[0]=1;
        return arr;
        }
        
        
        <----------------283. Move Zeroes -------------->
        
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array. 

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]
        
    public void moveZeroes(int[] nums) {
    int number = 0;
    for(int i = 0; i < nums.length; i++) {
        if(nums[i] != 0) 
        {
            int temp = nums[number];
            nums[number] = nums[i];
            nums[i] = temp;
            number++;
        }
    }
    }     
        
        

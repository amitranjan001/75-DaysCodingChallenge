
    <---------------------  287. Find the Duplicate Number ------------------------>
    
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

  public int findDuplicate(int[] nums) {
        int n= nums.length;
        if(n == 0)
        {
            return -1;
        }
        int fast = nums[0];
        int slow = nums[0];
        
        do{
            fast = nums[nums[fast]];
            slow = nums[slow];
        }while(fast != slow);
        
        slow = nums[0];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
    
       <------------------- 430. Flatten a Multilevel Doubly Linked List ----------------------->
       
 You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. 
 This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. 
These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.
Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. 
Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.

Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.

Example 1:
Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation: The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

Example 2:
Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation: The multilevel linked list in the input is shown.
After flattening the multilevel linked list it becomes:

Example 3:
Input: head = []
Output: []
Explanation: There could be empty list in the input.
 

       public Node flattenOfS(Node head) {
        if(head == null)
        {
            return null;
        }
        if(head.child != null)
        {
            Node next =head.next;
            head.next = head.child;
            head.child.prev = head;
            
            Node res = flattenOfS(head.child);
            res.next = next;
            if(next != null)
            {
                next.prev = res;
            }
            head.child = null;
        }
        flattenOfS(head.next);
        Node ptr = head;
        while(ptr.next != null)
        {
            ptr = ptr.next;
        }
        return ptr;
    }
    public Node flatten(Node head)
    {
        Node ptr = head;
        flattenOfS(ptr);
        return head;
    }


     <--------------- 118. Pascal's Triangle ----------->
     
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
Output: [[1]]

     public List<List<Integer>> generate(int numRows) {
        if(numRows ==0) 
           return new ArrayList();
        List<List<Integer>> result = new ArrayList();
        for(int i=1;i<=numRows;i++)
        {
            List<Integer> rows = new ArrayList();
            for(int j=0;j<i;j++)
            {
                if(j==0 || j==i-1)
                {
                    rows.add(1);
                }
                else
                {
                    rows.add(result.get(i-2).get(j)+result.get(i-2).get(j-1));
                }
            }
            result.add(rows);
        }
        return result;
    }
    
    
       <----------------- 26. Remove Duplicates from Sorted Array ----------->
       
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.
The relative order of the elements should be kept the same.

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

  public int removeDuplicates(int[] nums) {
      int i = 1; 
      int j = 0; 
        for (; i<nums.length; i++) { 
            if (nums[i] != nums[j]) { 
                j++; 
                nums[j] = nums[i]; 
            } 
        }
    return j+1;
    }
    
      <--------------56. Merge Intervals ------------>
      
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


     public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
if(intervals.length == 0 || intervals == null)
  return res.toArray(new int[0][]);

   Arrays.sort(intervals,(a,b)->a[0]-b[0]);

     int start = intervals[0][0];
     int end = intervals[0][1];

   for(int[] i: intervals)
    {
      if(i[0] <= end)
       {
         end= Math.max(end,i[1]);
       }
   else
    {
      res.add(new int[]{start,end});
      start =i[0];
      end = i[1];
    }
   }
   res.add(new int[]{start,end});
    return res.toArray(new int[0][]);
  }
          <----------- 15. 3Sum ----------->
          
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []


       public List<List<Integer>> threeSum(int[] nums) {
       Set<List<Integer>> res = new HashSet<>();
        
        if(nums.length == 0 ||nums.length == 1 ||nums.length == 2 ){
            return new ArrayList<>(res);
        }
        Arrays.sort(nums);
        for(int i = 0 ; i< nums.length-2;i++){
            int j = i+1;
            int k = nums.length -1;
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                
                if(sum == 0){
                    res.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    j++;
                    k--;
                }
              else if(sum > 0){
                  k--; 
               }
                else if(sum < 0){
                    j++;
                }
            }
        }
        return new ArrayList<>(res);
    }
}

      


      <--------------- 33. Search in Rotated Sorted Array ------------->
      
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], 
nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

    public int search(int[] nums, int target) {
        int st = 0, en = nums.length-1, mid;
        while (st <= en) {
            mid = (st+en)/2;
            if (target == nums[mid])
                return mid;

            if (nums[st] <= nums[mid]) {
                if (target >= nums[st] && target < nums[mid])
                    en = mid-1;
                else
                    st = mid+1;
            }
            else {
                if (target > nums[mid] && target <= nums[en]) 
                        st = mid+1;
                else
                    en = mid-1;
            }
        }
        return -1;
    }
    
    
         <--------------------- 852. Peak Index in a Mountain Array -------------------->
         
Let's call an array arr a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1

        public int peakIndexInMountainArray(int[] arr) {
        int low = 0;
        int high = arr.length-1;
        while(low < high)
        {
            int mid = low + (high - low)/2;
            if(arr[mid] < arr[mid+1])
            {
                low = mid+1;
            }
            else
            {
                high = mid;
            }
        }
        return low;
    }
    
    
    
        <-------------------  1351. Count Negative Numbers in a Sorted Matrix ------------------>
        
        
Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

Example 1:
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

Example 2:
Input: grid = [[3,2],[1,0]]
Output: 0


       public int countNegatives(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int row=0;
        int col = n-1;
        int count =0;
        while(row <m && col >=0)
        {
            if(grid[row][col] < 0)
            {
                col--;
                count+= m-row;
            }
            else
            {
                row++;
            }
        }
        return count;
    }

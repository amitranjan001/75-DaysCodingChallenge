
      <-------------  25. Reverse Nodes in k-Group --------------->
      
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end,
should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

     public ListNode reverseKGroup(ListNode head, int k) {
        int len =0;
        ListNode ptr = head;
        while(ptr != null)
        {
            ptr = ptr.next;
            len++;
        }
        int i=0;
        ListNode prev = null;
        ListNode first = null;
        ListNode current = head;
        ListNode next = head.next;
        while(len >= k)
        {
            i=0;
            prev = null;
                ptr = current;
            while(i < k)
            {
                current.next = prev;
                prev = next;
                current = next;
                if(next != null)
                {
                    next = next.next;
                }
                i++;
            }
            if(first != null)
            {
                first.next = prev;
            }
            else
            {
                head = prev;
            }
            first = ptr;
            len =+k;
        }
        if(first != null)
        {
            first.next = current;
        }
        return head;
    } 
    
       <--------------------- 142. Linked List Cycle II  ----------------------->
       
Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed).
It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.

     public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                slow = head;
                while(slow != fast){
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
    
    
    
       <-----------------------  61. Rotate List  ----------------------->
       
Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

      public ListNode rotateRight(ListNode head, int k) {
       if(head == null) return null;
        int size = 0;
        ListNode ptr = head;
        while(ptr != null)
        {
            size +=1;
            ptr = ptr.next;
        }
        k= k % size;
        
        if( k == 0) return head;
        
        ptr = head;
        while(k > 0)
        {
            ptr = ptr.next;
            k -=1;
        }
        ListNode node = head;
        while(ptr.next != null)
        {
            node = node.next;
            ptr = ptr.next;
        }
        ptr.next = head;
        head = node.next;
        node.next = null;
        return head;
    }




      

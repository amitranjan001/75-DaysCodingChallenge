
       <------------- 532. K-diff Pairs in an Array --------->
       
Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:
0 <= i, j < nums.length
i != j
nums[i] - nums[j] == k
Notice that |val| denotes the absolute value of val. 

Example 1:
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Example 2:
Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

Example 3:
Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).

     public int findPairs(int[] nums, int k) {      
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i], map.get(nums[i]) + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        int count = 0;
        Set<Integer> set = map.keySet();
        for(int num: set){
            if(k > 0 && map.containsKey(num + k)){
                count++;
            }
            if(k==0 && map.get(num) > 1){
                count++;
            }
        }
        return count;
    }
    
         <--------------- 442. Find All Duplicates in an Array --------------->
         
Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, 
return an array of all the integers that appears twice.
You must write an algorithm that runs in O(n) time and uses only constant extra space.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]

Example 2:
Input: nums = [1,1,2]
Output: [1]

Example 3:
Input: nums = [1]
Output: []

     public List<Integer> findDuplicates(int[] nums) {
       if(nums.length == 0)
       {
           return new ArrayList<>();
       }
        int length = nums.length;
        int x;
        
        List<Integer> result = new ArrayList<>();
        
        for(int i=0;i<length;i++)
        {
            x = Math.abs(nums[i]);
            if(nums[x-1] < 0)
            {
                result.add(x);
                continue;
            }
            nums[x-1] = -nums[x-1];
        }
        return result;
    }
    
    
    
        <------------ 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts -------->
        
You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:
horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.
Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts.
Since the answer can be a large number, return this modulo 109 + 7.

Example 1:
Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, 
the green piece of cake has the maximum area.

Example 2:
Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, 
the green and yellow pieces of cake have the maximum area.

Example 3:
Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9
  
        public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
        Arrays.sort(horizontalCuts);
        long hmax = horizontalCuts[0];
        for(int i=1;i<horizontalCuts.length;i++)
        {
            if(horizontalCuts[i] - horizontalCuts[i-1] > hmax)
            {
                hmax = horizontalCuts[i] - horizontalCuts[i-1];
            }
        }
    if(hmax < h-horizontalCuts[horizontalCuts.length-1])
    {
        hmax = h-horizontalCuts[horizontalCuts.length-1];
    }
      Arrays.sort(verticalCuts);
        long vmax = verticalCuts[0];
        for(int i=1;i<verticalCuts.length;i++)
        {
             if(verticalCuts[i] - verticalCuts[i-1] > vmax)
            {
                vmax = verticalCuts[i] - verticalCuts[i-1];
            }
        }
     if(vmax < w-verticalCuts[verticalCuts.length-1])
    {
        vmax = w-verticalCuts[verticalCuts.length-1];
    }
long res = (vmax * hmax) % 1000000007;
return (int)res;
 }
       

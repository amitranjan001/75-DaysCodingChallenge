
     <-------------- 20. Valid Parentheses  ----------------->
     
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

   class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i=0;i<s.length();i++)
        {
            char ch = s.charAt(i);
            if(ch== '(' || ch == '{' || ch == '[')
            {
                stack.push(ch);
            }
            else
            {
                if(stack.isEmpty())
                {
                    return false;
                }
                if(stack.pop() != getBrace(ch))
                {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
    
    private char getBrace(char c)
    {
        if(c == ')')
        {
            return '(';
        }
        if(c == '}')
        {
            return '{';
        }
        if(c == ']')
        {
            return '[';
        }
        return '(';
    }
}

             <-------------------  155. Min Stack  --------------------------->
             
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

      class MinStack {
     Stack<Integer> mainStack;
    Stack<Integer> minStack;
    
    public MinStack() {
        mainStack = new Stack();
        minStack = new Stack();
    }
    
    public void push(int x) {
        mainStack.push(x);
        if(minStack.isEmpty())
        {
            minStack.push(x);
        }
        else if(minStack.peek() >= x)
        {
            minStack.push(x);
        }
    }
    
    public void pop() {
        if(mainStack.isEmpty())
        {
            return;
        }
        int x = mainStack.pop();
        if(minStack.peek()==x)
        {
            minStack.pop();
        }
    }
    
    public int top() {
        if(!mainStack.isEmpty())
            return mainStack.peek();
        return 0;
    }
    
    public int getMin() {
        if(!minStack.isEmpty())
        {
            return minStack.peek();
        }
        return 0;
    }
}



     <--------------  
